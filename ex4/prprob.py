import numpy


def prprob(mode = 0):
    """PRPROB Character recognition problem definition 
   
   PRPROB() #
   Returns:
    ALPHABET - 35x26 matrix of 5x7 bit maps for each letter.
    TARGETS  - 26x26 target vectors. 
    """

    A = [0, 0, 1, 0, 0,
               0, 1, 0, 1, 0,
               0, 1, 0, 1, 0,
               1, 0, 0, 0, 1,
               1, 1, 1, 1, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1]

    B = [1, 1, 1, 1, 0,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 1, 1, 1, 0,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 1, 1, 1, 0]

    C = [0, 1, 1, 1, 0,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 1,
               0, 1, 1, 1, 0]

    D = [1, 1, 1, 1, 0,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 1, 1, 1, 0]

    E = [1, 1, 1, 1, 1,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 1, 1, 1, 0,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 1, 1, 1, 1]

    F = [1, 1, 1, 1, 1,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 1, 1, 1, 0,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0]

    G = [0, 1, 1, 1, 0,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 0, 0, 1, 1,
               1, 0, 0, 0, 1,
               0, 1, 1, 1, 0]

    H = [1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 1, 1, 1, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1]

    I = [0, 1, 1, 1, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               0, 1, 1, 1, 0]

    J = [1, 1, 1, 1, 1,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               1, 0, 1, 0, 0,
               0, 1, 0, 0, 0]

    K = [1, 0, 0, 0, 1,
               1, 0, 0, 1, 0,
               1, 0, 1, 0, 0,
               1, 1, 0, 0, 0,
               1, 0, 1, 0, 0,
               1, 0, 0, 1, 0,
               1, 0, 0, 0, 1]

    L = [1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 1, 1, 1, 1]

    M = [1, 0, 0, 0, 1,
               1, 1, 0, 1, 1,
               1, 0, 1, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1]

    N = [1, 0, 0, 0, 1,
               1, 1, 0, 0, 1,
               1, 1, 0, 0, 1,
               1, 0, 1, 0, 1,
               1, 0, 0, 1, 1,
               1, 0, 0, 1, 1,
               1, 0, 0, 0, 1]

    O = [0, 1, 1, 1, 0,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               0, 1, 1, 1, 0]

    P = [1, 1, 1, 1, 0,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 1, 1, 1, 0,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 0, 0, 0, 0]

    Q = [0, 1, 1, 1, 0,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 1, 0, 1,
               1, 0, 0, 1, 0,
               0, 1, 1, 0, 1]

    R = [1, 1, 1, 1, 0,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 1, 1, 1, 0,
               1, 0, 1, 0, 0,
               1, 0, 0, 1, 0,
               1, 0, 0, 0, 1]

    S = [0, 1, 1, 1, 0,
               1, 0, 0, 0, 1,
               0, 1, 0, 0, 0,
               0, 0, 1, 0, 0,
               0, 0, 0, 1, 0,
               1, 0, 0, 0, 1,
               0, 1, 1, 1, 0]

    T = [1, 1, 1, 1, 1,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0]

    U = [1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               0, 1, 1, 1, 0]

    V = [1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               0, 1, 0, 1, 0,
               0, 0, 1, 0, 0]

    W = [1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               1, 0, 1, 0, 1,
               1, 1, 0, 1, 1,
               1, 0, 0, 0, 1]

    X = [1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               0, 1, 0, 1, 0,
               0, 0, 1, 0, 0,
               0, 1, 0, 1, 0,
               1, 0, 0, 0, 1,
               1, 0, 0, 0, 1]

    Y = [1, 0, 0, 0, 1,
               1, 0, 0, 0, 1,
               0, 1, 0, 1, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0,
               0, 0, 1, 0, 0]

    Z = [1, 1, 1, 1, 1,
               0, 0, 0, 0, 1,
               0, 0, 0, 1, 0,
               0, 0, 1, 0, 0,
               0, 1, 0, 0, 0,
               1, 0, 0, 0, 0,
               1, 1, 1, 1, 1]

    alphabet = numpy.asarray([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P,
                Q, R, S, T, U, V, W, X, Y, Z])
    for i in range (len(alphabet)):
        alphabet[i] = numpy.asarray(alphabet[i])
    targets = numpy.eye(len(alphabet))

    if (mode == 1):
        for i in range (len(alphabet)):
            alphabet[i] = (alphabet[i]*2) - 1

    return alphabet.T, targets
